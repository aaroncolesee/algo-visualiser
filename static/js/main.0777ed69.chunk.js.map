{"version":3,"sources":["Algorithms.js","SortingVisualiser/SortingVisualiser.js","PathfindingVisualiser/Node.js","PathfindingVisualiser/PathfindingVisualiser.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["getMergesortAnimations","array","length","animations","auxiliaryArray","slice","mergesort","startIdx","endIdx","middleIdx","Math","floor","counter","lcounter","rcounter","push","merge","getQuicksortAnimations","quicksort","lowIdx","highIdx","j","pivotIdx","i","temp","partition","getBubbleSortAnimations","limitIdx","console","log","bubbleSort","updateDistances","grid","node","neighbors","col","row","unvisitedNeighbors","filter","neighbor","isVisited","distance","previousNode","SortingVisualiser","props","handleSliderChange","event","setState","numBars","target","value","resetArray","state","width","window","innerWidth","height","innerHeight","maxNum","updateWindowSize","bind","this","addEventListener","removeEventListener","min","max","random","disableButtons","algorithms","bars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","enableButtons","insertionSort","arr","countingSort","getElementById","disabled","className","classNamee","id","onClick","type","onChange","map","idx","key","React","Component","Styles","Styled","div","Node","icon","isStart","isEnd","name","BOARD","START_NODE","END_NODE","PathfindingVisualiser","resetGrid","createGrid","result","startNode","endNode","visitedNodes","unvisitedNodes","sort","nodeA","nodeB","closestNode","shift","Infinity","shortestPath","unshift","djikstra","colIdx","nodeIdx","cols","createNode","NavigationBar","to","App","Fragment","basename","process","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0777ed69.chunk.js","sourcesContent":["//Mergesort\r\nexport function getMergesortAnimations(array) {\r\n  if (array.length <= 1) return array;\r\n\r\n  const animations = [];\r\n  const auxiliaryArray = array.slice();\r\n  mergesort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergesort(array, startIdx, endIdx, auxiliaryArray, animations) {\r\n  if (startIdx === endIdx) return;\r\n\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergesort(auxiliaryArray, startIdx, middleIdx, array, animations);\r\n  mergesort(auxiliaryArray, middleIdx + 1, endIdx, array, animations);\r\n\r\n  merge(array, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(array, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n  let counter = startIdx;\r\n  let lcounter = startIdx;\r\n  let rcounter = middleIdx + 1;\r\n\r\n  while (lcounter <= middleIdx && rcounter <= endIdx) {\r\n    animations.push([lcounter, rcounter]);\r\n    animations.push([lcounter, rcounter]);\r\n    if (auxiliaryArray[lcounter] <= auxiliaryArray[rcounter]) {\r\n      animations.push([counter, auxiliaryArray[lcounter]]);\r\n      array[counter] = auxiliaryArray[lcounter];\r\n      counter++;\r\n      lcounter++;\r\n    } else {\r\n      animations.push([counter, auxiliaryArray[rcounter]]);\r\n      array[counter] = auxiliaryArray[rcounter];\r\n      counter++;\r\n      rcounter++;\r\n    }\r\n  }\r\n\r\n  while (lcounter <= middleIdx) {\r\n    animations.push([lcounter, lcounter]);\r\n    animations.push([lcounter, lcounter]);\r\n    animations.push([counter, auxiliaryArray[lcounter]]);\r\n    array[counter] = auxiliaryArray[lcounter];\r\n    counter++;\r\n    lcounter++;\r\n  }\r\n\r\n  while (rcounter <= endIdx) {\r\n    animations.push([rcounter, rcounter]);\r\n    animations.push([rcounter, rcounter]);\r\n    animations.push([counter, auxiliaryArray[rcounter]]);\r\n    array[counter] = auxiliaryArray[rcounter];\r\n    counter++;\r\n    rcounter++;\r\n  }\r\n}\r\n\r\n//quicksort\r\nexport function getQuicksortAnimations(array) {\r\n  if (array.length <= 1) return array;\r\n\r\n  const animations = [];\r\n  quicksort(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quicksort(array, lowIdx, highIdx, animations) {\r\n  if (lowIdx < highIdx) {\r\n    const j = partition(array, lowIdx, highIdx, animations);\r\n\r\n    quicksort(array, lowIdx, j, animations);\r\n    quicksort(array, j + 1, highIdx, animations);\r\n  }\r\n}\r\n\r\nfunction partition(array, lowIdx, highIdx, animations) {\r\n  const pivotIdx = lowIdx;\r\n\r\n  let i = lowIdx;\r\n  let j = highIdx;\r\n\r\n  while (i < j) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    do {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([i, array[i]]);\r\n      i++;\r\n    } while (array[i] < array[pivotIdx]);\r\n    do {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([j, array[j]]);\r\n      j--;\r\n    } while (array[j] > array[pivotIdx]);\r\n    if (i < j) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      animations.push([i, array[j]]);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n  }\r\n  animations.push([j, pivotIdx]);\r\n  animations.push([j, pivotIdx]);\r\n  animations.push([j, array[pivotIdx]]);\r\n  const temp = array[pivotIdx];\r\n  array[pivotIdx] = array[j];\r\n  array[j] = temp;\r\n\r\n  return j;\r\n}\r\n\r\n//bubblesort\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  bubbleSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(array, animations) {\r\n  let limitIdx = array.length - 1;\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < limitIdx; j++) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([j, array[j]]);\r\n      if (array[j] > array[j + 1]) {\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, array[j + 1]]);\r\n        animations.push([j + 1, j]);\r\n        animations.push([j + 1, j]);\r\n        animations.push([j + 1, array[j]]);\r\n        const temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n    }\r\n    limitIdx--;\r\n  }\r\n  console.log(array);\r\n}\r\n\r\n//insertionsort\r\nexport function getInsetionSortAnimations(array) {\r\n  if (array.length <= 1) return array;\r\n\r\n  const animations = [];\r\n  insertionSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSort(array, animations) {\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    while (j > 0 && array[j - 1] > array[j]) {\r\n      animations.push([j - 1, j]);\r\n      animations.push([j - 1, j]);\r\n      animations.push([j - 1, array[j]]);\r\n      animations.push([j, j - 1]);\r\n      animations.push([j, j - 1]);\r\n      animations.push([j, array[j - 1]]);\r\n      const temp = array[j];\r\n      array[j] = array[j - 1];\r\n      array[j - 1] = temp;\r\n      j--;\r\n    }\r\n  }\r\n}\r\n\r\n//countingosrt\r\nexport function getCountingSortAnimations(array, maxNum) {\r\n  const animations = [];\r\n  countingSort(array, maxNum, animations);\r\n  return animations;\r\n}\r\n\r\nfunction countingSort(array, maxNum, animations) {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i <= maxNum; i++) {\r\n    arr[i] = 0;\r\n  }\r\n  for (let i = 0; i < array.length; i++) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([i, array[i]]);\r\n    arr[array[i]]++;\r\n  }\r\n  let j = 0;\r\n  for (let i = 0; i <= arr.length; i++) {\r\n    while (arr[i] > 0) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([j, i]);\r\n      array[j] = i;\r\n      j++;\r\n      arr[i]--;\r\n    }\r\n  }\r\n}\r\n\r\n// dijkstra\r\nexport function djikstra(grid, startNode, endNode) {\r\n  startNode.distance = 0;\r\n  const visitedNodes = [];\r\n  const unvisitedNodes = [];\r\n  for (const col of grid) {\r\n    for (const node of col) {\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n  while (unvisitedNodes.length > 0) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.distance === Infinity) return visitedNodes; // stop condition; remaining nodes aren't reachable since the closest node has distance Infinity\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === endNode) return visitedNodes;\r\n    updateDistances(grid, closestNode); // update distance of neighbors\r\n  }\r\n}\r\n\r\nfunction updateDistances(grid, node) {\r\n  const neighbors = [];\r\n\r\n  if (node.col > 0) neighbors.push(grid[node.col - 1][node.row]);\r\n  if (node.col < grid.length - 1) neighbors.push(grid[node.col + 1][node.row]);\r\n  if (node.row > 0) neighbors.push(grid[node.col][node.row - 1]);\r\n  if (node.row < grid[0].length - 1)\r\n    neighbors.push(grid[node.col][node.row + 1]);\r\n\r\n  const unvisitedNeighbors = neighbors.filter(\r\n    (neighbor) => !neighbor.isVisited\r\n  ); // filter out visited neighbors\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function getShortestPath(startNode, endNode) {\r\n  const shortestPath = [];\r\n\r\n  let node = endNode;\r\n\r\n  while (node !== null) {\r\n    shortestPath.unshift(node);\r\n    node = node.previousNode;\r\n  }\r\n\r\n  return shortestPath;\r\n}\r\n","import React from \"react\";\r\nimport * as algorithms from \"../Algorithms.js\";\r\n\r\nconst ANIMATION_SPEED_MS = 5;\r\nconst PRIMARY_COLOR = \"turquoise\";\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nclass SortingVisualiser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n      array: [],\r\n      numBars: 50,\r\n      maxNum: 100000000,\r\n    };\r\n\r\n    this.updateWindowSize = this.updateWindowSize.bind(this);\r\n  }\r\n\r\n  updateWindowSize() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n    window.addEventListener(\"resize\", this.updateWindowSize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateWindowSize);\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < this.state.numBars; i++) {\r\n      array.push(randomIntFromInterval(5, this.state.maxNum));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergesort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getMergesortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  quicksort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getQuicksortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  bubbleSort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  insertionSort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getInsetionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  countingSort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getCountingSortAnimations(\r\n      this.state.array,\r\n      this.state.maxNum\r\n    );\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  disableButtons() {\r\n    document.getElementById(\"slider\").disabled = true;\r\n    document.getElementById(\"randomize-button\").disabled = true;\r\n    document.getElementById(\"mergesort-button\").disabled = true;\r\n    document.getElementById(\"quicksort-button\").disabled = true;\r\n    document.getElementById(\"bubblesort-button\").disabled = true;\r\n    document.getElementById(\"insertionsort-button\").disabled = true;\r\n    document.getElementById(\"countingsort-button\").disabled = true;\r\n  }\r\n\r\n  enableButtons() {\r\n    document.getElementById(\"slider\").disabled = false;\r\n    document.getElementById(\"randomize-button\").disabled = false;\r\n    document.getElementById(\"mergesort-button\").disabled = false;\r\n    document.getElementById(\"quicksort-button\").disabled = false;\r\n    document.getElementById(\"bubblesort-button\").disabled = false;\r\n    document.getElementById(\"insertionsort-button\").disabled = false;\r\n    document.getElementById(\"countingsort-button\").disabled = false;\r\n  }\r\n\r\n  handleSliderChange = (event) => {\r\n    this.setState({ numBars: event.target.value });\r\n    this.resetArray();\r\n  };\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"toolbar\">\r\n          <div classNamee=\"button-container\">\r\n            <button id=\"randomize-button\" onClick={() => this.resetArray()}>\r\n              Randomize\r\n            </button>\r\n            <button id=\"mergesort-button\" onClick={() => this.mergesort()}>\r\n              Merge Sort\r\n            </button>\r\n            <button id=\"quicksort-button\" onClick={() => this.quicksort()}>\r\n              Quick Sort\r\n            </button>\r\n            <button id=\"bubblesort-button\" onClick={() => this.bubbleSort()}>\r\n              Bubble Sort\r\n            </button>\r\n            <button\r\n              id=\"insertionsort-button\"\r\n              onClick={() => this.insertionSort()}\r\n            >\r\n              Insertion Sort\r\n            </button>\r\n            <button\r\n              id=\"countingsort-button\"\r\n              onClick={() => this.countingSort()}\r\n            >\r\n              Counting Sort\r\n            </button>\r\n          </div>\r\n          <div className=\"slider-container\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"10\"\r\n              max=\"100\"\r\n              value={this.state.numBars}\r\n              id=\"slider\"\r\n              className=\"slider\"\r\n              onChange={this.handleSliderChange}\r\n            ></input>\r\n            <div className=\"value\">{this.state.numBars}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bar-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${(value / this.state.maxNum) * 90}vh`,\r\n                width: `${(this.state.numBars / 250) * 100}vw`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualiser;\r\n","import React from \"react\";\r\nimport Styled from \"styled-components\";\r\n\r\nconst Styles = Styled.div`\r\n    .node {\r\n        height: 30px;\r\n        width: 30px;\r\n        border: 1px solid black;\r\n        border-bottom: none;\r\n        border-right: none;\r\n    }\r\n\r\n    .node-start {\r\n        background-color: green;\r\n    }\r\n\r\n    .node-end {\r\n        background-color: red;\r\n    }\r\n\r\n    .node-visited {\r\n        animation: visited-animation 2s forwards;\r\n    }\r\n\r\n    /* blue-brown-yelllow */\r\n    @keyframes visited-animation {\r\n        0% {transform: scale(0.3); background-color: rgb(60, 51, 81) ;}\r\n        25% {background-color: rgb(106, 80, 109);}\r\n        50% {background-color: rgb(174, 107, 107);}\r\n        75% {transform: scale(1.2); background-color: rgb(219, 159, 109);}\r\n        100% {transform: scale(1); background-color: rgb(255, 223, 122);}\r\n    }\r\n\r\n    .path {\r\n        animation: path-animation 2s forwards;\r\n    }\r\n\r\n    /* red-pink-purple */\r\n    @keyframes path-animation {\r\n        0% {transform: scale(0.3); background-color: rgb(255, 76, 76) ;}\r\n        25% {background-color: rgb(255, 76, 193);}\r\n        50% {background-color: rgb(235, 76, 255);}\r\n        75% {transform: scale(1.2); background-color: rgb(172, 76, 255);}\r\n        100% {transform: scale(1); background-color: rgb(127, 76, 255);}\r\n    }\r\n\r\n    .material-icons {\r\n    }\r\n`;\r\n\r\nclass Node extends React.Component {\r\n  render() {\r\n    const { col, row, isStart, isEnd } = this.props;\r\n    const name = isStart ? \"node-start\" : isEnd ? \"node-end\" : \"\";\r\n    let icon;\r\n    if (isStart) {\r\n      icon = <i className=\"material-icons\">stop_circle</i>;\r\n    } else if (isEnd) {\r\n      icon = <i className=\"material-icons\">star</i>;\r\n    }\r\n\r\n    return (\r\n      <Styles>\r\n        <div id={`node-${col}-${row}`} className={`node ${name}`}>\r\n          {icon}\r\n        </div>\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React from \"react\";\r\nimport Styled from \"styled-components\";\r\nimport Node from \"./Node\";\r\nimport * as algorithms from \"../Algorithms.js\";\r\n\r\nconst Styles = Styled.div`\r\n    .toolbar {\r\n        background-color: lightcoral;\r\n        text-align: center;\r\n    }\r\n    \r\n    .grid {\r\n        text-align: center;\r\n    }\r\n\r\n    .col {\r\n        display: inline-block;\r\n        vertical-align: top;\r\n\r\n        > div:last-child {\r\n            border-bottom: 1px solid black;\r\n        }\r\n\r\n        &:last-of-type {\r\n            border-right: 1px solid black;\r\n        }\r\n    }\r\n`;\r\n\r\n// [col ,row]\r\nconst BOARD = [40, 20];\r\nconst START_NODE = [0, 0];\r\nconst END_NODE = [35, 15];\r\n\r\nclass PathfindingVisualiser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      grid: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetGrid();\r\n  }\r\n\r\n  resetGrid() {\r\n    const grid = createGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  djikstra() {\r\n    const { grid } = this.state;\r\n    const result = algorithms.djikstra(\r\n      grid,\r\n      grid[START_NODE[0]][START_NODE[1]],\r\n      grid[END_NODE[0]][END_NODE[1]]\r\n    );\r\n\r\n    for (let i = 0; i < result.length; i++) {\r\n      setTimeout(() => {\r\n        const node = result[i];\r\n        document.getElementById(`node-${node.col}-${node.row}`).className =\r\n          \"node node-visited\";\r\n      }, i * 15);\r\n    }\r\n\r\n    const shortestPath = algorithms.getShortestPath(\r\n      grid[START_NODE[0]][START_NODE[1]],\r\n      grid[END_NODE[0]][END_NODE[1]]\r\n    );\r\n\r\n    setTimeout(() => {\r\n      for (let i = 0; i < shortestPath.length; i++) {\r\n        setTimeout(() => {\r\n          const node = shortestPath[i];\r\n          document.getElementById(`node-${node.col}-${node.row}`).className =\r\n            \"node node-visited path\";\r\n        }, i * 30);\r\n      }\r\n    }, result.length * 15 + 2000);\r\n  }\r\n\r\n  kruskal() {}\r\n\r\n  prim() {}\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    return (\r\n      <Styles>\r\n        <div className=\"toolbar\">\r\n          <div className=\"button-container\">\r\n            {/*<button id=\"reset-button\" onClick={() => this.resetGrid()}>\r\n              Reset\r\n    </button>*/}\r\n            <button id=\"djikstra-button\" onClick={() => this.djikstra()}>\r\n              Dijkstra's\r\n            </button>\r\n            {/*\r\n            <button id=\"kruskal-button\" onClick={() => this.kruskal()}>\r\n              Kruskal's\r\n            </button>\r\n            <button id=\"prim-button\" onClick={() => this.prim()}>\r\n              Prim's\r\n            </button>\r\n            */}\r\n          </div>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((col, colIdx) => {\r\n            return (\r\n              <div className=\"col\" key={colIdx}>\r\n                {col.map((node, nodeIdx) => {\r\n                  const { isStart, isEnd } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={colIdx}\r\n                      row={nodeIdx}\r\n                      isStart={isStart}\r\n                      isEnd={isEnd}\r\n                      previousNode={null}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\n\r\nconst createGrid = () => {\r\n  let grid = [];\r\n  for (let i = 0; i < BOARD[0]; i++) {\r\n    let cols = [];\r\n    for (let j = 0; j < BOARD[1]; j++) {\r\n      cols.push(createNode(i, j));\r\n    }\r\n    grid.push(cols);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: col === START_NODE[0] && row === START_NODE[1],\r\n    isEnd: col === END_NODE[0] && row === END_NODE[1],\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nexport default PathfindingVisualiser;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Styled from \"styled-components\";\r\n\r\nconst Styles = Styled.div`\r\n    .navbar {\r\n        background-color: lightcoral;\r\n        justify-content: center;\r\n        display: flex;\r\n    }\r\n\r\n    button {\r\n        background: none;\r\n        border: none;\r\n        padding: 0 5px;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <div className=\"navbar\">\r\n      <Link to=\"/sorting\">\r\n        <button>SORTING</button>\r\n      </Link>\r\n      <Link to=\"/pathfinding\">\r\n        <button>PATHFINDING</button>\r\n      </Link>\r\n    </div>\r\n  </Styles>\r\n);\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport SortingVisualiser from \"./SortingVisualiser/SortingVisualiser\";\r\nimport \"./SortingVisualiser/SortingVisualiser.css\";\r\nimport PathfindingVisualiser from \"./PathfindingVisualiser/PathfindingVisualiser\";\r\nimport { NavigationBar } from \"./components/NavigationBar\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <React.Fragment>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <NavigationBar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={SortingVisualiser} />\r\n          <Route path=\"/sorting\" component={SortingVisualiser} />\r\n          <Route path=\"/pathfinding\" component={PathfindingVisualiser} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}