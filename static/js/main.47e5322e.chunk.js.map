{"version":3,"sources":["logo.svg","Algorithms.js","SortingVisualiser/SortingVisualiser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergesortAnimations","array","length","animations","auxiliaryArray","slice","mergesort","startIdx","endIdx","middleIdx","Math","floor","counter","lcounter","rcounter","push","merge","console","log","SortingVisualiser","props","onSliderChange","event","setState","numBars","target","value","resetArray","state","this","min","max","i","random","algorithms","bars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","map","idx","key","width","onClick","type","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47e5322e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/*\r\nexport const mergesort = array => {\r\n    if (array.length <= 1) return array;\r\n\r\n    const mid = Math.floor(array.length/2);\r\n    const L = array.slice(0, mid);\r\n    const R = array.slice(mid);\r\n\r\n    return merge(mergesort(L), mergesort(R));\r\n};\r\n\r\nexport const merge = (left, right) => {\r\n    const result = [];\r\n    let lidx = 0;\r\n    let ridx = 0;\r\n\r\n    while(lidx < left.length && ridx < right.length) {\r\n        if(left[lidx] <= right[ridx]) {\r\n            result.push(left[lidx]);\r\n            lidx++;\r\n        }\r\n        else {\r\n            result.push(right[ridx]);\r\n            ridx++;\r\n        }\r\n    }\r\n\r\n    return result.concat(left.slice(lidx)).concat(right.slice(ridx));\r\n}\r\n*/\r\nexport function getMergesortAnimations(array) {\r\n    if (array.length <= 1) return array;\r\n\r\n    const animations = [];\r\n    const auxiliaryArray = array.slice();\r\n    mergesort(array, 0, array.length-1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergesort(array, startIdx, endIdx, auxiliaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n\r\n    const middleIdx = Math.floor((startIdx+endIdx)/2);\r\n    mergesort(auxiliaryArray, startIdx, middleIdx, array, animations);\r\n    mergesort(auxiliaryArray, middleIdx+1, endIdx, array, animations);\r\n\r\n    merge(array, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n\r\n    console.log(array);\r\n}\r\n\r\nfunction merge(array, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let counter = startIdx;\r\n    let lcounter = startIdx;\r\n    let rcounter = middleIdx+1;\r\n\r\n    while (lcounter <= middleIdx && rcounter <= endIdx) {\r\n        animations.push([lcounter, rcounter]);\r\n        animations.push([lcounter, rcounter]);\r\n        if (auxiliaryArray[lcounter] <= auxiliaryArray[rcounter]) {\r\n            animations.push([counter, auxiliaryArray[lcounter]]);\r\n            array[counter] = auxiliaryArray[lcounter];\r\n            counter++;\r\n            lcounter++;\r\n        }\r\n        else {\r\n            animations.push([counter, auxiliaryArray[rcounter]]);\r\n            array[counter] = auxiliaryArray[rcounter];\r\n            counter++;\r\n            rcounter++;\r\n        }\r\n    }\r\n\r\n    while (lcounter <= middleIdx) {\r\n        animations.push([lcounter, lcounter]);\r\n        animations.push([lcounter, lcounter]);\r\n        animations.push([counter, auxiliaryArray[lcounter]]);\r\n        array[counter] = auxiliaryArray[lcounter];\r\n        counter++;\r\n        lcounter++;\r\n    }\r\n\r\n    while (rcounter <= endIdx) {\r\n        animations.push([rcounter, rcounter]);\r\n        animations.push([rcounter, rcounter]);\r\n        animations.push([counter, auxiliaryArray[rcounter]]);\r\n        array[counter] = auxiliaryArray[rcounter];\r\n        counter++;\r\n        rcounter++;\r\n    }\r\n}\r\n\r\nexport const quicksort = array => {\r\n\r\n}","import React from 'react';\r\nimport * as algorithms from '../Algorithms.js';\r\n\r\nconst ANIMATION_SPEED_MS = 5;\r\nconst PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nclass SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array : [],\r\n            numBars: 50\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for ( let i = 0; i < this.state.numBars; i++ ) {\r\n            array.push(randomIntFromInterval(5, 850));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergesort() {\r\n        const animations = algorithms.getMergesortAnimations(this.state.array);\r\n        for(let i=0; i<animations.length; i++) {\r\n            const bars = document.getElementsByClassName('bar');\r\n            const isColorChange = i%3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = bars[barOneIdx].style;\r\n                const barTwoStyle = bars[barTwoIdx].style;\r\n                const color = i%3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = bars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    quicksort() {\r\n        const array = algorithms.quicksort(this.state.array);\r\n        this.setState({array});\r\n    }\r\n\r\n    onSliderChange = (event) => {\r\n        this.setState({numBars: event.target.value})\r\n        this.resetArray();\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n        return (\r\n            <div>\r\n                <div className='container'>\r\n                    {array.map((value, idx) => (\r\n                        <div className='bar' key={idx} style={{backgroundColor: PRIMARY_COLOR, height: `${value}px`, width: `${1200/this.state.numBars}px`}}></div>\r\n                    ))}\r\n                </div>\r\n                <button onClick={() => this.resetArray()}>Randomize</button>\r\n                <button onClick={() => this.mergesort()}>Merge Sort</button>\r\n                <input type='range' min='10' max='250' value={this.state.numBars} className='slider' onChange={this.onSliderChange}></input>\r\n                <div className='value'>{this.state.numBars}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualiser;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingVisualiser from './SortingVisualiser/SortingVisualiser';\nimport './SortingVisualiser/SortingVisualiser.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualiser></SortingVisualiser>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}