{"version":3,"sources":["Algorithms.js","SortingVisualiser/SortingVisualiser.js","PathfindingVisualiser/Node.js","MazeGenerationAlgorithms.js","PathfindingVisualiser/PathfindingVisualiser.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["getMergesortAnimations","array","length","animations","auxiliaryArray","slice","mergesort","startIdx","endIdx","middleIdx","Math","floor","counter","lcounter","rcounter","push","merge","getQuicksortAnimations","quicksort","lowIdx","highIdx","j","pivotIdx","i","temp","partition","getBubbleSortAnimations","limitIdx","console","log","bubbleSort","updateDistances","grid","node","neighbors","col","row","unvisitedNeighbors","filter","neighbor","isVisited","distance","previousNode","updateDistancesAstar","endNode","heuristic","abs","getShortestPath","startNode","shortestPath","unshift","SortingVisualiser","props","handleSliderChange","event","setState","numBars","target","value","resetArray","state","width","window","innerWidth","height","innerHeight","maxNum","updateWindowSize","bind","this","addEventListener","removeEventListener","min","max","random","disableButtons","algorithms","bars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","enableButtons","insertionSort","arr","countingSort","getElementById","disabled","className","id","onClick","type","onChange","map","idx","key","React","Component","Styles","Styled","div","Node","icon","isStart","isEnd","isWall","onMouseDown","onMouseEnter","onMouseUp","name","getDepthFirstMaze","depthFirstMaze","stack","newNode","pop","randomNumber","nextNode","concat","splice","BOARD","START_NODE","END_NODE","PathfindingVisualiser","isMousePressed","resetGrid","createGrid","result","visitedNodes","unvisitedNodes","sort","nodeA","nodeB","closestNode","shift","Infinity","mazeAlgorithms","resetIsVisited","clearPath","djikstra","astar","colIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","cols","createNode","NavigationBar","to","App","Fragment","basename","process","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f82abf6c.chunk.js","sourcesContent":["//Mergesort\r\nexport function getMergesortAnimations(array) {\r\n  if (array.length <= 1) return array;\r\n\r\n  const animations = [];\r\n  const auxiliaryArray = array.slice();\r\n  mergesort(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergesort(array, startIdx, endIdx, auxiliaryArray, animations) {\r\n  if (startIdx === endIdx) return;\r\n\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergesort(auxiliaryArray, startIdx, middleIdx, array, animations);\r\n  mergesort(auxiliaryArray, middleIdx + 1, endIdx, array, animations);\r\n\r\n  merge(array, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction merge(array, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n  let counter = startIdx;\r\n  let lcounter = startIdx;\r\n  let rcounter = middleIdx + 1;\r\n\r\n  while (lcounter <= middleIdx && rcounter <= endIdx) {\r\n    animations.push([lcounter, rcounter]);\r\n    animations.push([lcounter, rcounter]);\r\n    if (auxiliaryArray[lcounter] <= auxiliaryArray[rcounter]) {\r\n      animations.push([counter, auxiliaryArray[lcounter]]);\r\n      array[counter] = auxiliaryArray[lcounter];\r\n      counter++;\r\n      lcounter++;\r\n    } else {\r\n      animations.push([counter, auxiliaryArray[rcounter]]);\r\n      array[counter] = auxiliaryArray[rcounter];\r\n      counter++;\r\n      rcounter++;\r\n    }\r\n  }\r\n\r\n  while (lcounter <= middleIdx) {\r\n    animations.push([lcounter, lcounter]);\r\n    animations.push([lcounter, lcounter]);\r\n    animations.push([counter, auxiliaryArray[lcounter]]);\r\n    array[counter] = auxiliaryArray[lcounter];\r\n    counter++;\r\n    lcounter++;\r\n  }\r\n\r\n  while (rcounter <= endIdx) {\r\n    animations.push([rcounter, rcounter]);\r\n    animations.push([rcounter, rcounter]);\r\n    animations.push([counter, auxiliaryArray[rcounter]]);\r\n    array[counter] = auxiliaryArray[rcounter];\r\n    counter++;\r\n    rcounter++;\r\n  }\r\n}\r\n\r\n//quicksort\r\nexport function getQuicksortAnimations(array) {\r\n  if (array.length <= 1) return array;\r\n\r\n  const animations = [];\r\n  quicksort(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quicksort(array, lowIdx, highIdx, animations) {\r\n  if (lowIdx < highIdx) {\r\n    const j = partition(array, lowIdx, highIdx, animations);\r\n\r\n    quicksort(array, lowIdx, j, animations);\r\n    quicksort(array, j + 1, highIdx, animations);\r\n  }\r\n}\r\n\r\nfunction partition(array, lowIdx, highIdx, animations) {\r\n  const pivotIdx = lowIdx;\r\n\r\n  let i = lowIdx;\r\n  let j = highIdx;\r\n\r\n  while (i < j) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    do {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([i, array[i]]);\r\n      i++;\r\n    } while (array[i] < array[pivotIdx]);\r\n    do {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([j, array[j]]);\r\n      j--;\r\n    } while (array[j] > array[pivotIdx]);\r\n    if (i < j) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      animations.push([i, array[j]]);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n  }\r\n  animations.push([j, pivotIdx]);\r\n  animations.push([j, pivotIdx]);\r\n  animations.push([j, array[pivotIdx]]);\r\n  const temp = array[pivotIdx];\r\n  array[pivotIdx] = array[j];\r\n  array[j] = temp;\r\n\r\n  return j;\r\n}\r\n\r\n//bubblesort\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  bubbleSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(array, animations) {\r\n  let limitIdx = array.length - 1;\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0; j < limitIdx; j++) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([j, array[j]]);\r\n      if (array[j] > array[j + 1]) {\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, array[j + 1]]);\r\n        animations.push([j + 1, j]);\r\n        animations.push([j + 1, j]);\r\n        animations.push([j + 1, array[j]]);\r\n        const temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n    }\r\n    limitIdx--;\r\n  }\r\n  console.log(array);\r\n}\r\n\r\n//insertionsort\r\nexport function getInsetionSortAnimations(array) {\r\n  if (array.length <= 1) return array;\r\n\r\n  const animations = [];\r\n  insertionSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSort(array, animations) {\r\n  for (let i = 1; i < array.length; i++) {\r\n    let j = i;\r\n    while (j > 0 && array[j - 1] > array[j]) {\r\n      animations.push([j - 1, j]);\r\n      animations.push([j - 1, j]);\r\n      animations.push([j - 1, array[j]]);\r\n      animations.push([j, j - 1]);\r\n      animations.push([j, j - 1]);\r\n      animations.push([j, array[j - 1]]);\r\n      const temp = array[j];\r\n      array[j] = array[j - 1];\r\n      array[j - 1] = temp;\r\n      j--;\r\n    }\r\n  }\r\n}\r\n\r\n//countingosrt\r\nexport function getCountingSortAnimations(array, maxNum) {\r\n  const animations = [];\r\n  countingSort(array, maxNum, animations);\r\n  return animations;\r\n}\r\n\r\nfunction countingSort(array, maxNum, animations) {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i <= maxNum; i++) {\r\n    arr[i] = 0;\r\n  }\r\n  for (let i = 0; i < array.length; i++) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([i, array[i]]);\r\n    arr[array[i]]++;\r\n  }\r\n  let j = 0;\r\n  for (let i = 0; i <= arr.length; i++) {\r\n    while (arr[i] > 0) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([j, i]);\r\n      array[j] = i;\r\n      j++;\r\n      arr[i]--;\r\n    }\r\n  }\r\n}\r\n\r\n// dijkstra\r\nexport function djikstra(grid, startNode, endNode) {\r\n  startNode.distance = 0;\r\n  const visitedNodes = [];\r\n  const unvisitedNodes = [];\r\n  for (const col of grid) {\r\n    for (const node of col) {\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n\r\n  while (unvisitedNodes.length > 0) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue; // ignore if wall\r\n    if (closestNode.distance === Infinity) return visitedNodes; // stop condition; remaining nodes aren't reachable since the closest node has distance Infinity\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === endNode) return visitedNodes;\r\n    updateDistances(grid, closestNode); // update distance of neighbors\r\n  }\r\n}\r\n\r\nfunction updateDistances(grid, node) {\r\n  const neighbors = [];\r\n\r\n  if (node.col > 0) neighbors.push(grid[node.col - 1][node.row]);\r\n  if (node.col < grid.length - 1) neighbors.push(grid[node.col + 1][node.row]);\r\n  if (node.row > 0) neighbors.push(grid[node.col][node.row - 1]);\r\n  if (node.row < grid[0].length - 1)\r\n    neighbors.push(grid[node.col][node.row + 1]);\r\n\r\n  const unvisitedNeighbors = neighbors.filter(\r\n    (neighbor) => !neighbor.isVisited\r\n  ); // filter out visited neighbors\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function astar(grid, startNode, endNode) {\r\n  startNode.distance = 0;\r\n  const visitedNodes = [];\r\n  const unvisitedNodes = [];\r\n  for (const col of grid) {\r\n    for (const node of col) {\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n  while (unvisitedNodes.length > 0) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue; // ignore if wall\r\n    if (closestNode.distance === Infinity) return visitedNodes; // stop condition; remaining nodes aren't reachable since the closest node has distance Infinity\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === endNode) return visitedNodes;\r\n    updateDistancesAstar(grid, closestNode, endNode); // update distance of neighbors\r\n  }\r\n}\r\n\r\nfunction updateDistancesAstar(grid, node, endNode) {\r\n  const neighbors = [];\r\n\r\n  if (node.col > 0) neighbors.push(grid[node.col - 1][node.row]);\r\n  if (node.col < grid.length - 1) neighbors.push(grid[node.col + 1][node.row]);\r\n  if (node.row > 0) neighbors.push(grid[node.col][node.row - 1]);\r\n  if (node.row < grid[0].length - 1)\r\n    neighbors.push(grid[node.col][node.row + 1]);\r\n\r\n  const unvisitedNeighbors = neighbors.filter(\r\n    (neighbor) => !neighbor.isVisited\r\n  ); // filter out visited neighbors\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    const heuristic =\r\n      Math.abs(endNode.col - neighbor.col) +\r\n      Math.abs(endNode.row - neighbor.row);\r\n\r\n    neighbor.distance = node.distance + 1 + heuristic; // A* is similar to Dijkstra's but adds an additional heuristic to the cost;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nexport function getShortestPath(startNode, endNode) {\r\n  const shortestPath = [];\r\n\r\n  let node = endNode;\r\n\r\n  while (node !== null) {\r\n    shortestPath.unshift(node);\r\n    node = node.previousNode;\r\n  }\r\n\r\n  return shortestPath;\r\n}\r\n","import React from \"react\";\r\nimport * as algorithms from \"../Algorithms.js\";\r\n\r\nconst ANIMATION_SPEED_MS = 5;\r\nconst PRIMARY_COLOR = \"turquoise\";\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nclass SortingVisualiser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n      array: [],\r\n      numBars: 50,\r\n      maxNum: 100000000,\r\n    };\r\n\r\n    this.updateWindowSize = this.updateWindowSize.bind(this);\r\n  }\r\n\r\n  updateWindowSize() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n    window.addEventListener(\"resize\", this.updateWindowSize);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateWindowSize);\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < this.state.numBars; i++) {\r\n      array.push(randomIntFromInterval(5, this.state.maxNum));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergesort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getMergesortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  quicksort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getQuicksortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  bubbleSort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  insertionSort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getInsetionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  countingSort() {\r\n    this.disableButtons();\r\n\r\n    const animations = algorithms.getCountingSortAnimations(\r\n      this.state.array,\r\n      this.state.maxNum\r\n    );\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const bars = document.getElementsByClassName(\"bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(newHeight * 850) / this.state.maxNum}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, animations.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  disableButtons() {\r\n    document.getElementById(\"slider\").disabled = true;\r\n    document.getElementById(\"randomize-button\").disabled = true;\r\n    document.getElementById(\"mergesort-button\").disabled = true;\r\n    document.getElementById(\"quicksort-button\").disabled = true;\r\n    document.getElementById(\"bubblesort-button\").disabled = true;\r\n    document.getElementById(\"insertionsort-button\").disabled = true;\r\n    document.getElementById(\"countingsort-button\").disabled = true;\r\n  }\r\n\r\n  enableButtons() {\r\n    document.getElementById(\"slider\").disabled = false;\r\n    document.getElementById(\"randomize-button\").disabled = false;\r\n    document.getElementById(\"mergesort-button\").disabled = false;\r\n    document.getElementById(\"quicksort-button\").disabled = false;\r\n    document.getElementById(\"bubblesort-button\").disabled = false;\r\n    document.getElementById(\"insertionsort-button\").disabled = false;\r\n    document.getElementById(\"countingsort-button\").disabled = false;\r\n  }\r\n\r\n  handleSliderChange = (event) => {\r\n    this.setState({ numBars: event.target.value });\r\n    this.resetArray();\r\n  };\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"toolbar\">\r\n          <div className=\"button-container\">\r\n            <button id=\"randomize-button\" onClick={() => this.resetArray()}>\r\n              Randomize\r\n            </button>\r\n            <button id=\"mergesort-button\" onClick={() => this.mergesort()}>\r\n              Merge Sort\r\n            </button>\r\n            <button id=\"quicksort-button\" onClick={() => this.quicksort()}>\r\n              Quick Sort\r\n            </button>\r\n            <button id=\"bubblesort-button\" onClick={() => this.bubbleSort()}>\r\n              Bubble Sort\r\n            </button>\r\n            <button\r\n              id=\"insertionsort-button\"\r\n              onClick={() => this.insertionSort()}\r\n            >\r\n              Insertion Sort\r\n            </button>\r\n            <button\r\n              id=\"countingsort-button\"\r\n              onClick={() => this.countingSort()}\r\n            >\r\n              Counting Sort\r\n            </button>\r\n          </div>\r\n          <div className=\"slider-container\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"10\"\r\n              max=\"100\"\r\n              value={this.state.numBars}\r\n              id=\"slider\"\r\n              className=\"slider\"\r\n              onChange={this.handleSliderChange}\r\n            ></input>\r\n            <div className=\"value\">{this.state.numBars}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bar-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${(value / this.state.maxNum) * 90}vh`,\r\n                width: `${(this.state.numBars / 250) * 100}vw`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualiser;\r\n","import React from \"react\";\r\nimport Styled from \"styled-components\";\r\n\r\nconst Styles = Styled.div`\r\n    .node {\r\n        height: 25px;\r\n        width: 25px;\r\n        border: 1px solid black;\r\n        border-bottom: none;\r\n        border-right: none;\r\n        background-color: white;\r\n    }\r\n\r\n    .node-visited {\r\n        animation: visited-animation 2s forwards;\r\n    }\r\n\r\n    /* blue-brown-yelllow */\r\n    @keyframes visited-animation {\r\n        0% {transform: scale(0.3); background-color: rgb(60, 51, 81) ;}\r\n        25% {background-color: rgb(106, 80, 109);}\r\n        50% {background-color: rgb(174, 107, 107);}\r\n        75% {transform: scale(1.2); background-color: rgb(219, 159, 109);}\r\n        100% {transform: scale(1); background-color: rgb(255, 223, 122);}\r\n    }\r\n\r\n    .path {\r\n        animation: path-animation 2s forwards;\r\n    }\r\n\r\n    /* red-pink-purple */\r\n    @keyframes path-animation {\r\n        0% {transform: scale(0.3); background-color: rgb(255, 76, 76) ;}\r\n        25% {background-color: rgb(255, 76, 193);}\r\n        50% {background-color: rgb(235, 76, 255);}\r\n        75% {transform: scale(1.2); background-color: rgb(172, 76, 255);}\r\n        100% {transform: scale(1); background-color: rgb(127, 76, 255);}\r\n    }\r\n\r\n    .wall {\r\n      animation: wall-animation 2s forwards;\r\n    }\r\n\r\n    /* light green to dark blue */\r\n    @keyframes wall-animation {\r\n        0% {transform: scale(0.3); background-color: #c9e4ca ;}\r\n        25% {background-color: #87bba2;}\r\n        50% {background-color: #55828b;}\r\n        75% {transform: scale(1.2); #3b6064;}\r\n        100% {transform: scale(1); background-color: #364958;}\r\n    }\r\n    .material-icons {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .start-icon {\r\n      color: mediumseagreen;\r\n    }\r\n\r\n    .end-icon {\r\n      color: tomato;\r\n    }\r\n\r\n`;\r\n\r\nclass Node extends React.Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      row,\r\n      isStart,\r\n      isEnd,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n    } = this.props;\r\n    const name = isWall\r\n      ? \"wall\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isEnd\r\n      ? \"node-end\"\r\n      : \"\";\r\n    let icon;\r\n    if (isStart) {\r\n      icon = <i className=\"material-icons start-icon\">stop_circle</i>;\r\n    } else if (isEnd) {\r\n      icon = <i className=\"material-icons end-icon\">star</i>;\r\n    }\r\n\r\n    return (\r\n      <Styles>\r\n        <div\r\n          id={`node-${col}-${row}`}\r\n          className={`node ${name}`}\r\n          onMouseDown={() => onMouseDown(col, row)}\r\n          onMouseEnter={() => onMouseEnter(col, row)}\r\n          onMouseUp={() => onMouseUp()}\r\n        >\r\n          {icon}\r\n        </div>\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","export function getDepthFirstMaze(grid) {\r\n  const array = [];\r\n  //makeBorder(grid, array);\r\n  array.push(grid[9][9]);\r\n  let stack = [];\r\n  const node = grid[9][9];\r\n  depthFirstMaze(array, grid, node, stack);\r\n  return array;\r\n}\r\n\r\nfunction depthFirstMaze(array, grid, node, stack) {\r\n  node.isVisited = true;\r\n\r\n  if (node === grid[61][25]) {\r\n    if (stack.length == 0) return;\r\n    const newNode = stack.pop();\r\n    depthFirstMaze(array, grid, newNode, stack);\r\n    return;\r\n  }\r\n  const neighbors = [];\r\n\r\n  if (node.col > 1) neighbors.push(grid[node.col - 2][node.row]);\r\n  if (node.col < grid.length - 2) neighbors.push(grid[node.col + 2][node.row]);\r\n  if (node.row > 1) neighbors.push(grid[node.col][node.row - 2]);\r\n  if (node.row < grid[0].length - 2)\r\n    neighbors.push(grid[node.col][node.row + 2]);\r\n\r\n  const unvisitedNeighbors = neighbors.filter(\r\n    (neighbor) => !neighbor.isVisited\r\n  ); // filter out visited neighbors\r\n\r\n  if (unvisitedNeighbors == 0) {\r\n    if (stack.length == 0) return;\r\n    const newNode = stack.pop();\r\n    depthFirstMaze(array, grid, newNode, stack);\r\n    return;\r\n  } // dead end\r\n  const randomNumber = Math.floor(Math.random() * unvisitedNeighbors.length);\r\n  const nextNode = unvisitedNeighbors[randomNumber];\r\n\r\n  stack = stack.concat(unvisitedNeighbors.splice(randomNumber, 1));\r\n\r\n  array.push(\r\n    grid[(node.col + nextNode.col) / 2][(node.row + nextNode.row) / 2]\r\n  );\r\n  array.push(nextNode);\r\n\r\n  depthFirstMaze(array, grid, nextNode, stack);\r\n}\r\n\r\nfunction makeBorder(grid, array) {\r\n  for (let i = 0; i < grid.length; i++) {\r\n    array.push(grid[i][0]);\r\n    array.push(grid[i][grid[0].length - 1]);\r\n  }\r\n  for (let i = 0; i < grid[0].length - 1; i++) {\r\n    array.push(grid[0][i]);\r\n    array.push(grid[grid.length - 1][i]);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Styled from \"styled-components\";\r\nimport Node from \"./Node\";\r\nimport * as algorithms from \"../Algorithms.js\";\r\nimport * as mazeAlgorithms from \"../MazeGenerationAlgorithms.js\";\r\n\r\nconst ANIMATION_SPEED_MS = 10;\r\nconst SP_ANIMATION_SPEED_MS = 30;\r\n\r\n// [col ,row]\r\nconst BOARD = [71, 31];\r\nconst START_NODE = [27, 9];\r\nconst END_NODE = [61, 25];\r\n\r\nconst Styles = Styled.div`\r\n    .toolbar {\r\n        background-color: lightcoral;\r\n        text-align: center;\r\n    }\r\n    \r\n    .grid {\r\n        text-align: center;\r\n    }\r\n\r\n    .col {\r\n        display: inline-block;\r\n        vertical-align: top;\r\n\r\n        > div:last-child {\r\n            border-bottom: 1px solid black;\r\n        }\r\n\r\n        &:last-of-type {\r\n            border-right: 1px solid black;\r\n        }\r\n    }\r\n\r\n    .legend-container {\r\n        padding: 5px 0 5px 0;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    .legend {\r\n        margin: 0 5px 0 5px;\r\n        veritcal-align: middle;\r\n    }\r\n\r\n    .box {        \r\n        margin: 0 5px 0 5px;\r\n        height: 25px;\r\n        width: 25px;\r\n        float: left;\r\n    }\r\n\r\n    .material-icons {\r\n        vertical-align: middle;\r\n        font-size: 25px;\r\n    }\r\n\r\n    .legend > .material-icons {\r\n        margin: 0 5px 0 5px;\r\n    }\r\n\r\n    .start-icon {\r\n      color: mediumseagreen;\r\n    }\r\n\r\n    .end-icon {\r\n      color: tomato;\r\n    }\r\n`;\r\n\r\nclass PathfindingVisualiser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      grid: [],\r\n      isMousePressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetGrid();\r\n  }\r\n\r\n  resetGrid() {\r\n    const grid = createGrid();\r\n\r\n    this.setState({ grid });\r\n  }\r\n\r\n  clearPath() {\r\n    const { grid } = this.state;\r\n\r\n    for (const col of grid) {\r\n      for (const node of col) {\r\n        if (\r\n          node.className === \"node node-visited\" ||\r\n          node.className === \"node node-visited path\"\r\n        )\r\n          node.className = \"node \";\r\n      }\r\n    }\r\n\r\n    this.setState({ grid });\r\n  }\r\n\r\n  resetIsVisited() {\r\n    const { grid } = this.state;\r\n    for (const col of grid) {\r\n      for (const node of col) {\r\n        node.isVisited = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  djikstra() {\r\n    this.disableButtons();\r\n\r\n    const { grid } = this.state;\r\n\r\n    const result = algorithms.djikstra(\r\n      grid,\r\n      grid[START_NODE[0]][START_NODE[1]],\r\n      grid[END_NODE[0]][END_NODE[1]]\r\n    );\r\n\r\n    for (let i = 0; i < result.length; i++) {\r\n      setTimeout(() => {\r\n        const node = result[i];\r\n        document.getElementById(`node-${node.col}-${node.row}`).className =\r\n          \"node node-visited\";\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    const shortestPath = algorithms.getShortestPath(\r\n      grid[START_NODE[0]][START_NODE[1]],\r\n      grid[END_NODE[0]][END_NODE[1]]\r\n    );\r\n\r\n    setTimeout(() => {\r\n      for (let i = 0; i < shortestPath.length; i++) {\r\n        setTimeout(() => {\r\n          const node = shortestPath[i];\r\n          document.getElementById(`node-${node.col}-${node.row}`).className =\r\n            \"node node-visited path\";\r\n        }, i * SP_ANIMATION_SPEED_MS);\r\n      }\r\n    }, result.length * ANIMATION_SPEED_MS);\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, result.length * ANIMATION_SPEED_MS + shortestPath.length * SP_ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  astar() {\r\n    this.disableButtons();\r\n\r\n    const { grid } = this.state;\r\n\r\n    const result = algorithms.astar(\r\n      grid,\r\n      grid[START_NODE[0]][START_NODE[1]],\r\n      grid[END_NODE[0]][END_NODE[1]]\r\n    );\r\n\r\n    for (let i = 0; i < result.length; i++) {\r\n      setTimeout(() => {\r\n        const node = result[i];\r\n        document.getElementById(`node-${node.col}-${node.row}`).className =\r\n          \"node node-visited\";\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    const shortestPath = algorithms.getShortestPath(\r\n      grid[START_NODE[0]][START_NODE[1]],\r\n      grid[END_NODE[0]][END_NODE[1]]\r\n    );\r\n\r\n    setTimeout(() => {\r\n      for (let i = 0; i < shortestPath.length; i++) {\r\n        setTimeout(() => {\r\n          const node = shortestPath[i];\r\n          document.getElementById(`node-${node.col}-${node.row}`).className =\r\n            \"node node-visited path\";\r\n        }, i * SP_ANIMATION_SPEED_MS);\r\n      }\r\n    }, result.length * ANIMATION_SPEED_MS);\r\n\r\n    setTimeout(() => {\r\n      this.enableButtons();\r\n    }, result.length * ANIMATION_SPEED_MS + shortestPath.length * SP_ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  depthFirstMaze() {\r\n    this.disableButtons();\r\n\r\n    const { grid } = this.state;\r\n    const result = mazeAlgorithms.getDepthFirstMaze(grid);\r\n\r\n    // set all nodes to walls\r\n    for (let i = 0; i < BOARD[0]; i++) {\r\n      for (let j = 0; j < BOARD[1]; j++) {\r\n        document.getElementById(`node-${i}-${j}`).className = \"node wall\";\r\n        grid[i][j].isWall = true;\r\n      }\r\n    }\r\n\r\n    // generate the paths\r\n    for (let i = 0; i < result.length; i++) {\r\n      setTimeout(() => {\r\n        const node = result[i];\r\n        document.getElementById(`node-${node.col}-${node.row}`).className =\r\n          \"node\";\r\n        grid[node.col][node.row].isWall = false;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.resetIsVisited(); // reset isVisited because the algorithm used this\r\n      this.setState({ grid });\r\n      this.enableButtons();\r\n    }, result.length * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  disableButtons() {\r\n    document.getElementById(\"reset-button\").disabled = true;\r\n    document.getElementById(\"clear-path-button\").disabled = true;\r\n    document.getElementById(\"dijkstra-button\").disabled = true;\r\n    document.getElementById(\"astar-button\").disabled = true;\r\n    document.getElementById(\"clear-path-button\").disabled = true;\r\n  }\r\n\r\n  enableButtons() {\r\n    document.getElementById(\"reset-button\").disabled = false;\r\n    document.getElementById(\"dijkstra-button\").disabled = false;\r\n    document.getElementById(\"astar-button\").disabled = false;\r\n  }\r\n\r\n  handleMouseDown(col, row) {\r\n    const { grid } = this.state;\r\n\r\n    grid[col][row].isWall = !grid[col][row].isWall;\r\n\r\n    this.setState({ grid, isMousePressed: true });\r\n  }\r\n\r\n  handleMouseEnter(col, row) {\r\n    const { grid, isMousePressed } = this.state;\r\n\r\n    if (!isMousePressed) return;\r\n    grid[col][row].isWall = !grid[col][row].isWall;\r\n\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ isMousePressed: false });\r\n  }\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n\r\n    return (\r\n      <Styles>\r\n        <div className=\"toolbar\">\r\n          <div className=\"button-container\">\r\n            <button id=\"reset-button\" onClick={() => this.resetGrid()}>\r\n              Reset\r\n            </button>\r\n            <button id=\"clear-path-button\" onClick={() => this.clearPath()}>\r\n              Clear Path\r\n            </button>\r\n            <button id=\"dijkstra-button\" onClick={() => this.djikstra()}>\r\n              Dijkstra's\r\n            </button>\r\n            <button id=\"astar-button\" onClick={() => this.astar()}>\r\n              A*\r\n            </button>\r\n            <button\r\n              id=\"recursive-backtracking-button\"\r\n              onClick={() => this.depthFirstMaze()}\r\n            >\r\n              Depth First Maze\r\n            </button>\r\n          </div>\r\n          <div className=\"legend-container\">\r\n            <div className=\"legend\">\r\n              <i className=\"material-icons start-icon\">stop_circle</i>\r\n              Start Node\r\n            </div>\r\n            <div className=\"legend\">\r\n              <i className=\"material-icons end-icon\">star</i>\r\n              End Node\r\n            </div>\r\n            <div className=\"legend\">\r\n              <div\r\n                className=\"box\"\r\n                style={{\r\n                  backgroundColor: \"white\",\r\n                }}\r\n              />\r\n              Unvisited Nodes\r\n            </div>\r\n            <div className=\"legend\">\r\n              <div\r\n                className=\"box\"\r\n                style={{\r\n                  backgroundColor: \"rgb(255, 223, 122)\",\r\n                }}\r\n              />\r\n              Visited Nodes\r\n            </div>\r\n            <div className=\"legend\">\r\n              <div\r\n                className=\"box\"\r\n                style={{\r\n                  backgroundColor: \"cadetblue\",\r\n                }}\r\n              />\r\n              Wall Nodes\r\n            </div>\r\n            <div className=\"legend\">\r\n              <div\r\n                className=\"box\"\r\n                style={{\r\n                  backgroundColor: \"rgb(127, 76, 255)\",\r\n                }}\r\n              />\r\n              Shortest Path\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((col, colIdx) => {\r\n            return (\r\n              <div className=\"col\" key={colIdx}>\r\n                {col.map((node, nodeIdx) => {\r\n                  const { isStart, isEnd, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={colIdx}\r\n                      row={nodeIdx}\r\n                      isStart={isStart}\r\n                      isEnd={isEnd}\r\n                      isWall={isWall}\r\n                      previousNode={null}\r\n                      onMouseDown={(col, nodeIdx) =>\r\n                        this.handleMouseDown(col, nodeIdx)\r\n                      }\r\n                      onMouseEnter={(col, nodeIdx) =>\r\n                        this.handleMouseEnter(col, nodeIdx)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Styles>\r\n    );\r\n  }\r\n}\r\n\r\nconst createGrid = () => {\r\n  let grid = [];\r\n  for (let i = 0; i < BOARD[0]; i++) {\r\n    let cols = [];\r\n    for (let j = 0; j < BOARD[1]; j++) {\r\n      cols.push(createNode(i, j));\r\n    }\r\n    grid.push(cols);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: col === START_NODE[0] && row === START_NODE[1],\r\n    isEnd: col === END_NODE[0] && row === END_NODE[1],\r\n    isWall: false,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nexport default PathfindingVisualiser;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Styled from \"styled-components\";\r\n\r\nconst Styles = Styled.div`\r\n    .navbar {\r\n        background-color: lightcoral;\r\n        justify-content: center;\r\n        display: flex;\r\n    }\r\n\r\n    button {\r\n        background: none;\r\n        border: none;\r\n        padding: 0 5px;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <div className=\"navbar\">\r\n      <Link to=\"/sorting\">\r\n        <button>SORTING</button>\r\n      </Link>\r\n      <Link to=\"/pathfinding\">\r\n        <button>PATHFINDING</button>\r\n      </Link>\r\n    </div>\r\n  </Styles>\r\n);\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport SortingVisualiser from \"./SortingVisualiser/SortingVisualiser\";\r\nimport \"./SortingVisualiser/SortingVisualiser.css\";\r\nimport PathfindingVisualiser from \"./PathfindingVisualiser/PathfindingVisualiser\";\r\nimport { NavigationBar } from \"./components/NavigationBar\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <React.Fragment>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <NavigationBar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={SortingVisualiser} />\r\n          <Route path=\"/sorting\" component={SortingVisualiser} />\r\n          <Route path=\"/pathfinding\" component={PathfindingVisualiser} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}